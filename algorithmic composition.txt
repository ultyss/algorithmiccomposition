import random
import mido
import os

class MarkovChain:
    def __init__(self):
        self.transitions = {}
    
    def add_transition(self, state1, state2):
        if state1 not in self.transitions:
            self.transitions[state1] = []
        self.transitions[state1].append(state2)
    
    def generate_sequence(self, start_state, length):
        sequence = [start_state]
        current_state = start_state
        for _ in range(length - 1):
            if current_state in self.transitions:
                next_state = random.choice(self.transitions[current_state])
                sequence.append(next_state)
                current_state = next_state
            else:
                break
        return sequence

# notalar customize edilebilir
musical_elements = {
    'A': {'note': 60, 'duration': 0.5, 'velocity': 64},  #  (C4)
    'B': {'note': 62, 'duration': 0.5, 'velocity': 64},  #  (D4)
    'C': {'note': 64, 'duration': 0.5, 'velocity': 64},  #  (E4)
    'D': {'note': 65, 'duration': 0.5, 'velocity': 64},  #  (F4)
    'E': {'note': 67, 'duration': 0.5, 'velocity': 64},  #  (G4)
    'F': {'note': 69, 'duration': 0.5, 'velocity': 64}   #  (A4)
}

# zincir olusturma
def generate_random_chain():
    chain = MarkovChain()
    states = list(musical_elements.keys())
    for i in range(len(states)):
        chain.add_transition(states[i], random.choice(states))
    return chain

# zincirden midi olusturma
def generate_midi_events(chain, sequence_length):
    start_state = random.choice(list(musical_elements.keys()))
    sequence = chain.generate_sequence(start_state, sequence_length)
    midi_events = []
    for state in sequence:
        if state in musical_elements:
            note = musical_elements[state]['note']
            duration = musical_elements[state]['duration']
            velocity = musical_elements[state]['velocity']
            midi_events.append(mido.Message('note_on', note=note, velocity=velocity))
            midi_events.append(mido.Message('note_off', note=note, velocity=0, time=int(duration * 1000)))
    return midi_events

# midi file olusturma
def create_midi_file(midi_events, filename):
    mid = mido.MidiFile()
    track = mido.MidiTrack()
    mid.tracks.append(track)
    track.extend(midi_events)
    mid.save(filename)

# ana gorev
def main():
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    filename = os.path.join(desktop_path, 'random_music.mid')
    sequence_length = 24  # Adjust this to change the duration of the music piece
    chain = generate_random_chain()
    midi_events = generate_midi_events(chain, sequence_length)
    create_midi_file(midi_events, filename)

if __name__ == "__main__":
    main()
